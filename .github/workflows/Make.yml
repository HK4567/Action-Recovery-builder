name: Make Recovery

on:
  workflow_dispatch:
    inputs:
      LIBRARY_NAME:
        description: 'LIBRARY_NAME'
        required: true
        default: 'twrp'
      LIBRARY_URL:
        description: 'LIBRARY_URL'
        required: true
        default: 'https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp'
      LIBRARY_BRANCH:
        description: 'LIBRARY_BRANCH'
        required: true
        default: 'twrp-11'
      DEVICE_URL:
        description: 'DEVICE_URL'
        required: true
        default: 'https://github.com/HK4567/android_device_lenvovo_TB-J706F.git'
      DEVICE_BRANCH:
        description: 'DEVICE_BRANCH'
        required: true
        default: 'Android-11'
      DEVICE_PATH:
        description: 'DEVICE_PATH'
        required: true
        default: 'device/lenovo/J706F'
      DEVICE_NAME:
        description: 'DEVICE_NAME'
        required: true
        default: 'J706F'

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-18.04

name: 'Maximize build disk space'
description: 'Maximize the available disk space for your build job'
branding:
  icon: 'crop'
  color: 'orange'
inputs:
  root-reserve-mb:
    description: 'Space to be left free on the root filesystem, in Megabytes.'
    required: false
    default: '1024'
  temp-reserve-mb:
    description: 'Space to be left free on the temp filesystem (/mnt), in Megabytes.'
    required: false
    default: '100'
  swap-size-mb:
    description: 'Swap space to create, in Megabytes.'
    required: false
    default: '4096'
  overprovision-lvm:
    description: |
      Create the LVM disk images as sparse files, making the space required for the LVM image files *appear* unused on the
      hosting volumes until actually allocated. Use with care, this can lead to surprising out-of-disk-space situations.
      You should prefer adjusting root-reserve-mb/temp-reserve-mb over using this option.
    required: false
    default: 'false'
  build-mount-path:
    description: 'Absolute path to the mount point where the build space will be available, defaults to $GITHUB_WORKSPACE if unset.'
    required: false
  pv-loop-path:
    description: 'Absolute file path for the LVM image created on the root filesystem, the default is usually fine.'
    required: false
    default: '/pv.img'
  tmp-pv-loop-path:
    description: 'Absolute file path for the LVM image created on the temp filesystem, the default is usually fine. Must reside on /mnt'
    required: false
    default: '/mnt/tmp-pv.img'
  remove-dotnet:
    description: 'Removes .NET runtime and libraries. (frees ~17 GB)'
    required: false
    default: 'false'
  remove-android:
    description: 'Removes Android SDKs and Tools. (frees ~11 GB)'
    required: false
    default: 'false'
  remove-haskell:
    description: 'Removes GHC (Haskell) artifacts. (frees ~2.7 GB)'
    required: false
    default: 'false'
runs:
  using: "composite"
  steps:
    - name: Disk space report before modification
      shell: bash
      run: |
        echo "Memory and swap:"
        free
        echo
        swapon --show
        echo
 
        echo "Available storage:"
        df -h
        echo
 
    - name: Maximize build disk space
      shell: bash
      run: |
          set -euo pipefail
 
          BUILD_MOUNT_PATH="${{ inputs.build-mount-path }}"
          if [[ -z "${BUILD_MOUNT_PATH}" ]]; then
            BUILD_MOUNT_PATH="${GITHUB_WORKSPACE}"
          fi
 
          echo "Arguments:"
          echo
          echo "  Root reserve:      ${{ inputs.root-reserve-mb }} MiB"
          echo "  Temp reserve:      ${{ inputs.temp-reserve-mb }} MiB"
          echo "  Swap space:        ${{ inputs.swap-size-mb }} MiB"
          echo "  Overprovision LVM: ${{ inputs.overprovision-lvm }}"
          echo "  Mount path:        ${BUILD_MOUNT_PATH}"
          echo "  Root PV loop path: ${{ inputs.pv-loop-path }}"
          echo "  Temp PV loop path: ${{ inputs.tmp-pv-loop-path }}"
          echo -n "  Removing:     "
          if [[ ${{ inputs.remove-dotnet }} == 'true' ]]; then
            echo -n "dotnet "
          fi
          if [[ ${{ inputs.remove-android }} == 'true' ]]; then
            echo -n "android "
          fi
          if [[ ${{ inputs.remove-haskell }} == 'true' ]]; then
            echo -n "haskell "
          fi
          echo
 
          echo "Removing unwanted software... "
          if [[ ${{ inputs.remove-dotnet }} == 'true' ]]; then
            sudo rm -rf /usr/share/dotnet
          fi
          if [[ ${{ inputs.remove-android }} == 'true' ]]; then
            sudo rm -rf /usr/local/lib/android
          fi
          if [[ ${{ inputs.remove-haskell }} == 'true' ]]; then
            sudo rm -rf /opt/ghc
          fi
          echo "... done"
 
          VG_NAME=buildvg
 
          # github runners have an active swap file in /mnt/swapfile
          # we want to reuse the temp disk, so first unmount swap and clean the temp disk
          echo "Unmounting and removing swap file."
          sudo swapoff -a
          sudo rm -f /mnt/swapfile
 
          echo "Creating LVM Volume."
          echo "  Creating LVM PV on root fs."
          # create loop pv image on root fs
          ROOT_RESERVE_KB=$(expr ${{ inputs.root-reserve-mb }} \* 1024)
          ROOT_FREE_KB=$(df --block-size=1024 --output=avail / | tail -1)
          ROOT_LVM_SIZE_KB=$(expr $ROOT_FREE_KB - $ROOT_RESERVE_KB)
          ROOT_LVM_SIZE_BYTES=$(expr $ROOT_LVM_SIZE_KB \* 1024)
          sudo touch "${{ inputs.pv-loop-path }}" && sudo fallocate -z -l "${ROOT_LVM_SIZE_BYTES}" "${{ inputs.pv-loop-path }}"
          export ROOT_LOOP_DEV=$(sudo losetup --find --show "${{ inputs.pv-loop-path }}")
          sudo pvcreate -f "${ROOT_LOOP_DEV}"
 
          # create pv on temp disk
          echo "  Creating LVM PV on temp fs."
          TMP_RESERVE_KB=$(expr ${{ inputs.temp-reserve-mb }} \* 1024)
          TMP_FREE_KB=$(df --block-size=1024 --output=avail /mnt | tail -1)
          TMP_LVM_SIZE_KB=$(expr $TMP_FREE_KB - $TMP_RESERVE_KB)
          TMP_LVM_SIZE_BYTES=$(expr $TMP_LVM_SIZE_KB \* 1024)
          sudo touch "${{ inputs.tmp-pv-loop-path }}" && sudo fallocate -z -l "${TMP_LVM_SIZE_BYTES}" "${{ inputs.tmp-pv-loop-path }}"
          export TMP_LOOP_DEV=$(sudo losetup --find --show "${{ inputs.tmp-pv-loop-path }}")
          sudo pvcreate -f "${TMP_LOOP_DEV}"
 
          # create volume group from these pvs
          sudo vgcreate "${VG_NAME}" "${TMP_LOOP_DEV}" "${ROOT_LOOP_DEV}"
 
          echo "Recreating swap"
          # create and activate swap
          sudo lvcreate -L "${{ inputs.swap-size-mb }}M" -n swap "${VG_NAME}"
          sudo mkswap "/dev/mapper/${VG_NAME}-swap"
          sudo swapon "/dev/mapper/${VG_NAME}-swap"
 
          echo "Creating build volume"
          # create and mount build volume
          sudo lvcreate -l 100%FREE -n buildlv "${VG_NAME}"
          if [[ ${{ inputs.overprovision-lvm }} == 'true' ]]; then
            sudo mkfs.ext4 -m0 "/dev/mapper/${VG_NAME}-buildlv"
          else
            sudo mkfs.ext4 -Enodiscard -m0 "/dev/mapper/${VG_NAME}-buildlv"
          fi
          sudo mount "/dev/mapper/${VG_NAME}-buildlv" "${BUILD_MOUNT_PATH}"
          sudo chown -R runner "${BUILD_MOUNT_PATH}"
          sudo chgrp -R runner "${BUILD_MOUNT_PATH}"
 
    - name: Disk space report after modification
      shell: bash
      run: |
        echo "Memory and swap:"
        free
        echo
        swapon --show
        echo
 
        echo "Available storage:"
        df -h
    
    steps:
    - name: Check Out
      uses: actions/checkout@main
      
    - name: Prepare the environment
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/sudo apt/sources.list.d
        sudo apt -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo apt -y autoremove --purge
        sudo apt -y autoclean
        sudo apt clean
        sudo apt update
        sudo apt -y install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev tree lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc unzip jq bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev imagemagick libbz2-dev libssl-dev lzma ncftp bash-completion python openjdk-8-jdk qemu-user-static
      
    - name: Set variables
      run: |
        echo "::set-output name=date::$(date +%F)"
      id: var
      
    - name: Install repo
      run: |
        mkdir ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
        export PATH=~/bin:$PATH
      
    - name: Initialize repo
      run: |
        PATH=~/bin:$PATH
        mkdir workspace
        cd workspace
        echo "::set-output name=pwd::$(pwd)"
        git config --global user.name "Hikaru's Action-Build-Bot"
        git config --global user.email "Android@teio.tk"
        repo init --depth=1 -u ${{ github.event.inputs.LIBRARY_URL }} -b ${{ github.event.inputs.LIBRARY_BRANCH }}
      id: pwd
          
    - name: Repo Sync
      run: |
        PATH=~/bin:$PATH
        cd workspace
        repo sync -j$(nproc --all)
      
    - name: Clone device
      run: |
        PATH=~/bin:$PATH
        cd ${{ steps.pwd.outputs.pwd }}
        git clone ${{ github.event.inputs.DEVICE_URL }} -b ${{ github.event.inputs.DEVICE_BRANCH }} ./${{ github.event.inputs.DEVICE_PATH }}

    - name: Building
      run: |
        PATH=~/bin:$PATH
        cd ${{ steps.pwd.outputs.pwd }}
        export ALLOW_MISSING_DEPENDENCIES=true
        source build/envsetup.sh
        lunch ${{ github.event.inputs.LIBRARY_NAME }}_${{ github.event.inputs.DEVICE_NAME }}-eng 
        make clean
        make recoveryimage -j$(nproc --all)

    - name: check file size
      run: |
        cd workspace
        cd out
        cd target
        cd product
        cd ${{ github.event.inputs.DEVICE_NAME }}
        ls -lht
        cd ../..
        cd ../..
        
    - name: Upload to Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          workspace/out/target/product/${{ github.event.inputs.DEVICE_NAME }}/*.zip
          workspace/out/target/product/${{ github.event.inputs.DEVICE_NAME }}/recovery.img
        name: ${{ github.event.inputs.DEVICE_NAME }}-${{ github.run_id }}
        tag_name: ${{ github.run_id }}
        body: Recovery for ${{ github.event.inputs.DEVICE_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.work }}
